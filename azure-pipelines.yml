trigger:
- master
stages:
- stage: Test
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
    steps:
    

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'

    #- script: |
    #  displayName: 'Install dependencies'

    - script: |
        python FooFinder/test.py
      displayName: 'Integration Tests'

  - job:
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        BuildArtifact:
          python.version: '3.7'
    steps:
    - script: |
        pip install wheel
        pip install twine
      displayName: 'Install dependencies'

    - script: |
        python setup.py sdist
      displayName: 'Artifact creation'

    - task: CopyFiles@2
      inputs:
        SourceFolder: ./dist
        targetFolder: $(Build.ArtifactStagingDirectory)

    # - task: GitHubRelease@0
    #   inputs:
    #     gitHubConnection: MadisonAster
    #     repositoryName: $(Build.Repository.Name)
    #     action: 'create' # Options: create, edit, delete
    #     #target: '$(Build.SourceVersion)' # Required when action == Create || Action == Edit
    #     tagSource: 'auto' # Required when action == Create# Options: auto, manual
    #     #tagPattern: # Optional
    #     #tag: # Required when action == Edit || Action == Delete || TagSource == Manual
    #     #title: # Optional
    #     #releaseNotesSource: 'file' # Optional. Options: file, inline
    #     #releaseNotesInline: Use this option to manually enter release notes. Use with releaseNotesSource = inline
    #     #releaseNotesFilePath: # Optional. Use the contents of a file as release notes. 
    #     #releaseNotes: # Optional
    #     assets: $(Build.ArtifactStagingDirectory)/* # Optional
    #     #assetUploadMode: 'delete' # Optional. Options: delete, replace
    #     #isDraft: false # Optional
    #     #isPreRelease: false # Optional
    #     #addChangeLog: true # Optional
    #     #compareWith: 'lastFullRelease' # Required when addChangeLog == True. Options: lastFullRelease, lastRelease, lastReleaseByTag
    #     #releaseTag: # Required when compareWith == LastReleaseByTag

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: 'FooFinder'

# - script: |
#     python setup.py sdist
#     python setup.py bdist_wheel --universal
#   displayName: 'python setup.py sdist'

# - task: CopyFiles@2
#   displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)'
#     Contents: 'dist/*.whl'
#     TargetFolder: '$(Build.ArtifactStagingDirectory)'

# - task: TwineAuthenticate@1
#   displayName: Twine Authenticate
#   inputs:
#     artifactFeed: FooFinder/FooFinder_Feed

# - script: 'pip install twine'
#   displayName: 'pip install twine'

# - script: |
#     python -m twine upload -r FooFinder_Feed --config-file $(PYPIRC_PATH) dist/*.whl
#   displayName: 'twine upload --username $(username) --password ??? $(Build.ArtifactStagingDirectory)/dist/*.whl'
#   condition: succeededOrFailed()
#   timeoutInMinutes: 20

# twine upload --username $(username) --password $(password) $(Build.ArtifactStagingDirectory)/dist/*.whl
# trigger:
#   branches:
#     include: ['*']
#   tags:
#     include: ['*']
# stages:
# - stage: Test
#   jobs:
#   - job:
#     pool:
#       vmImage: 'ubuntu-latest'
#     strategy:
#       matrix:
#         Python36:
#           python.version: '3.6'
#         Python37:
#           python.version: '3.7'
#         Python38:
#           python.version: '3.8'
#         Python39:
#           python.version: '3.9'
#     steps:

#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '$(python.version)'
#       displayName: 'Use Python $(python.version)'

#     #- script: |
#     #  displayName: 'Install dependencies'

#     - script: |
#         python FooFinder/test.py
#       displayName: 'Integration Tests'

# - script: |
#     pip install wheel
#     pip install twine

# - script: |
#     python setup.py sdist
#     python setup.py bdist_wheel --universal
  
# - task: TwineAuthenticate@1
#   displayName: Twine Authenticate
#   inputs:
#     artifactFeed: FooFinder/FooFinder_Feed
# - script: |
#     python -m twine upload -r FooFinder_Feed --config-file $(PYPIRC_PATH) dist/*.whl

# - stage: Deploy
#   condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
#   dependsOn: Test
#   jobs:
#   - job:
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:

#     - script: |
#         python -m pip install --upgrade pip
#         python -m pip install --upgrade setuptools wheel twine
#         python setup.py sdist
#         python setup.py bdist_wheel --universal
#       displayName: 'Build'

#     - task: GithubRelease@0 
#       displayName: 'Create GitHub Release'      
#       inputs:
#         gitHubConnection: FooFinder Release connection
#         repositoryName: MadisonAster/FooFinder           
#         assets: dist/*

#     - task: TwineAuthenticate@1
#       displayName: 'Twine Authenticate'
#       inputs:
#         # In this case, name of the service connection is "pypitest".
#         pythonUploadServiceConnection: AzureTwineConnection

#     # Use command line script to 'twine upload', use -r to pass the repository name and --config-file to pass the environment variable set by the authenticate task.
#     #python -m twine upload -r "AzureTwineConnection" --config-file $(PYPIRC_PATH) dist/*.whl
#     #python -m twine upload -r FooFinder --repository-url https://upload.pypi.org/legacy/ --config-file $(PYPIRC_PATH) dist/*.whl
#     #python -m twine upload -r FooFinder --config-file $(PYPIRC_PATH) dist/*
#     - script: |
#         python -m twine upload -r pypi --config-file $(PYPIRC_PATH) dist/*
        