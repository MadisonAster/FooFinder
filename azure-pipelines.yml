trigger:
- master
stages:
- stage: Test
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'

    - script: |
        python FooFinder/test.py
      displayName: 'Integration Tests'

  - job: Tags
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        BuildArtifact:
          python.version: '3.7'
    steps:
    - script: |
        echo "##vso[task.setvariable variable=RELEASE_VERSION]$(python setup.py --version)"
        echo "##vso[task.setvariable variable=TAG_VERSION]$(git tag --points-at $(Build.SourceVersion))"
        echo "##vso[task.setvariable variable=SBNAME]$(Build.SourceBranchName)"
        echo $(RELEASE_VERSION)
        echo $(TAG_VERSION)
        echo $(SBNAME)
      name: TagVariables
      displayName: 'Tag Variables'

  - job:
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        BuildArtifact:
          python.version: '3.7'
    condition: eq(dependencies.Tags.outputs['TagVariables.TAG_VERSION'], dependencies.Tags.outputs['TagVariables.RELEASE_VERSION'])
    steps:
    - script: |
        pip install twine
        python setup.py sdist
      displayName: 'Artifact creation'

    - task: CopyFiles@2
      inputs:
        SourceFolder: ./dist
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: 'FooFinder'

    - task: GitHubRelease@0
      inputs:
        gitHubConnection: github.com_MadisonAster
        repositoryName: $(Build.Repository.Name)
        action: 'create' # Options: create, edit, delete
        target: $(Build.SourceVersion) # Required when action == Create || Action == Edit
        tagSource: 'auto' # Required when action == Create# Options: auto, manual
        tagPattern: '[0-9]+.[0-9]+.[0-9]+' # Optional
        tag: $(RELEASE_VERSION) # Required when action == Edit || Action == Delete || TagSource == Manual
        title: $(RELEASE_VERSION) # Optional
        assets: $(Build.ArtifactStagingDirectory)/* # Optional
        #releaseNotesSource: 'file' # Optional. Options: file, inline
        #releaseNotesInline: Use this option to manually enter release notes. Use with releaseNotesSource = inline
        #releaseNotesFilePath: # Optional. Use the contents of a file as release notes. 
        #releaseNotes: # Optional
        #assetUploadMode: 'delete' # Optional. Options: delete, replace
        #isDraft: false # Optional
        #isPreRelease: false # Optional
        #addChangeLog: true # Optional
        #compareWith: 'lastFullRelease' # Required when addChangeLog == True. Options: lastFullRelease, lastRelease, lastReleaseByTag
        #releaseTag: # Required when compareWith == LastReleaseByTag

    - task: TwineAuthenticate@1
      inputs:
        pythonUploadServiceConnection: 'PyPi-FooFinder'
    - script: |
        pip install wheel
        python setup.py bdist_wheel
        python -m twine upload --non-interactive --verbose -r FooFinder --config-file $(PYPIRC_PATH) dist/*.whl
